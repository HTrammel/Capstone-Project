demo()
graphics()
demo(graphics)
q()
install.packages("manipulate")
install.packages("knitr")
install.packages("rmarkdown")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages(c("knitr", "manipulate", "rmarkdown"))
install.packages("KernSmooth")
library(KernSmooth)
calldetail <- read.csv("H:/InIn Data/calldetail.csv", header=FALSE)
View(calldetail)
calldetail <- read.csv("H:/InIn Data/calldetail.csv", header=TRUE)
View(calldetail)
agentactivitylog <- read.csv("H:/InIn Data/agentactivitylog.csv")
View(agentactivitylog)
source('H:/InIn Data/call_center_data.r')
View(calldetail)
View(agentactivitylog)
install.packages("swirl")
View(calldetail)
View(calldetail)
View(agentactivitylog)
View(calldetail)
ls()
rm(list=ls())
ls()
save.image("C:\\Users\\hlt\\Documents\\.RData")
library(datasets)
data(mtcars)
with(mtcars, tapply(hp,cyl,mean))
d <- with(mtcars, tapply(hp,cyl,mean))
c4 <- d$4
c4 <- d[4]
c8 <- d[8]
c4
d
d[[4]]
d[4]
d[,4]
class(d)
d[1]
d[1,2]
d[2,1]
d[1]
rowmean(d[1])
q()
!(0 >= -1)
!FALSE
TRUE && FALSE || 9 >= 4 && 3 <6
q()
install.packages("RMySQL",type="source")
install.packages("RMySQL",type="source")
q()
sys.getenv('MYSQL_HOME')
Sys.getenv('MYSQL_HOME')
q()
install.packages("RMySQL",type="source")
con <- dbConnect(MySQL(), host="127.0.0.1", port=3306, user="hlt", password="Idon'tlikeCARDS")
library(RMySQL)
con <- dbConnect(MySQL(), host="127.0.0.1", port=3306, user="hlt", password="Idon'tlikeCARDS")
con
q()
update.packages(ask='graphics',checkBuilt=TRUE)
q()
?RWeka
install.packages(RWeka)
install.packages("RWeka")
install.packages("RWekajars")
install.packages("rJava")
install.packages("OpenNLP")
install.packages("openNLP")
q()
update.packages(ask='graphics',checkBuilt=TRUE)
save.image("C:\\GitHub\\Coursera\\Capstone-Project\\.RData")
source("C:\\GitHub\\Coursera\\Capstone-Project\\explore_mini_v1r1.R")
source("C:\\GitHub\\Coursera\\Capstone-Project\\explore_mini_v1r1.R")
source("C:\\GitHub\\Coursera\\Capstone-Project\\explore_mini_v1r1.R")
source("C:\\GitHub\\Coursera\\Capstone-Project\\explore_mini_v1r1.R")
source("C:\\GitHub\\Coursera\\Capstone-Project\\explore_mini_v1r1.R")
?scan
source("C:\\GitHub\\Coursera\\Capstone-Project\\explore_mini_v1r1.R")
source("C:\\GitHub\\Coursera\\Capstone-Project\\explore_mini_v1r1.R")
source("C:\\GitHub\\Coursera\\Capstone-Project\\explore_mini_v1r1.R")
source("C:\\GitHub\\Coursera\\Capstone-Project\\explore_backoff_v1r7.R")
source("C:\\GitHub\\Coursera\\Capstone-Project\\explore_backoff_v1r7.R")
source("C:\\GitHub\\Coursera\\Capstone-Project\\explore_backoff_v1r7.R")
source("C:\\GitHub\\Coursera\\Capstone-Project\\explore_backoff_v1r7.R")
source("C:\\GitHub\\Coursera\\Capstone-Project\\explore_backoff_v1r7.R")
source("C:\\GitHub\\Coursera\\Capstone-Project\\explore_backoff_v1r7.R")
?corpus
source("C:\\GitHub\\Coursera\\Capstone-Project\\explore_backoff_v1r7.R")
?tokenize
source("C:\\GitHub\\Coursera\\Capstone-Project\\explore_backoff_v1r7.R")
source("C:\\GitHub\\Coursera\\Capstone-Project\\explore_backoff_v1r7.R")
source("C:\\GitHub\\Coursera\\Capstone-Project\\explore_backoff_v1r7.R")
source("C:\\GitHub\\Coursera\\Capstone-Project\\explore_backoff_v1r7.R")
source("C:\\GitHub\\Coursera\\Capstone-Project\\explore_backoff_v1r7.R")
q()
source('C:/GitHub/Coursera/Capstone-Project/explore_backoff_v1r7.R')
source('C:/GitHub/Coursera/Capstone-Project/explore_mini_v1r1.R')
head(ng_1)
head(ng_4)
head(ng_3)
head(ng_2)
debugSource('C:/GitHub/Coursera/Capstone-Project/explore_mini_v1r1.R')
source('C:/GitHub/Coursera/Capstone-Project/explore_mini_v1r1.R')
dfm(ng_4)
n4 <- dfm(ng_4)
n4
head(n4)
tail(n4)
features(n4)
tail(features(n4))
subset(n4,feature=="the loveliest dresses")
print(n4)
install.packages(c("fields", "gamlss", "gamlss.data", "rgl"))
plot(kwic(ng1))
plot(kwic(ng_1))
str(ng_1)
subset(ng_4, list =="the loveliest dresses")
subset(ng_4, "the loveliest dresses")
plot(kwic(ng_1,"dresses"))
source('C:/GitHub/Coursera/Capstone-Project/explore_mini_v1r2.R')
colSums(voc_dfm, dims - 2)
?colSums
library(Matrix)
voc_freq <- colSums(voc_dfm. na.rm = TRUE)
voc_freq <- colSums(voc_dfm. na.rm = TRUE, sparseResult = TRUE)
voc_freq <- colSums(voc_dfm)
head(voc_freq)
voc_names <- names(voc_freq)
data_frame(voc_names, voc_freq)
voc_list <- data_frame(voc_names, voc_freq)
View(voc_list)
source('C:/GitHub/Coursera/Capstone-Project/explore_mini_v1r2.R')
warnings()
source('C:/GitHub/Coursera/Capstone-Project/explore_mini_v1r2.R')
save(voc_df,"Data/voc_df.Rds")
saveRDS(voc_df,"Data/voc_df.Rds")
View(voc_df)
source('C:/GitHub/Coursera/Capstone-Project/explore_mini_v1r2.R')
View(voc_df)
filter(voc_df, voc_names == "that is")
?file.remove
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
source('~/Github/Coursera/Capstone-Project/draft_backoff_v1r1.R')
rm(list=c("voc_freq",
"voc_names",
"vocab",
"voc_corpus",
"en_all"
))
source('~/Github/Coursera/Capstone-Project/draft_backoff_v1r1.R')
rm(b, n, t)
source('~/Github/Coursera/Capstone-Project/draft_backoff_v1r1.R')
View(voc_df)
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
filter(samp_df, voc_terms == "these Americans")
filter(samp_df, samp_names == "these Americans")
filter(samp_df, samp_names == "hard to tell")
filter(samp_df, samp_names == "hard")
filter(samp_df, samp_names == "hard to")
View(samp_df)
filter(samp_df, samp_names == "a guilty pleasure")
filter(samp_df, samp_names == "guilty pleasure bringing")
filter(samp_df, samp_names == "a huge huge")
stri_count_words("a huge huge")
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
sapply(samp_names, function(x) stri_count_words(x))
samp_names2 <- mutate(samp_names, word_count = stri_count_words)
samp_df2 <- samp_df %>% mutate_each(funs, stri_count_words)
samp_df2 <- samp_df %>% mutate_each(funs, stri_count_words(samp_names))
samp_df2 <- samp_df %>% mutate(word_count = stri_count_words(samp_names))
View(samp_df2)
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
source('~/Github/Coursera/Capstone-Project/draft_backoff_v1r1.R')
?match
source('~/Github/Coursera/Capstone-Project/draft_backoff_v1r1.R')
filter(voc_df, voc_names == "guilty pleasure bringing")
View(voc_df)
filter(voc_df, voc_names == "guilty")
filter(voc_df, voc_names == "guilty pleasure")
filter(voc_df, voc_names == "guilty pleasure bringing")
filter(voc_df, voc_names == "guilty pleasure bring")
filter(voc_df, voc_names == "a guilty pleasure")
source('C:/GitHub/Coursera/Capstone-Project/guess_it_v1r1.R')
install.packages(c("caret", "knitr", "MuMIn"))
stri_split_fixed("I have a dream"," ")
)
stri_split_fixed("I have a dream"," ")
library(stringi)
stri_split_fixed("I have a dream"," ")
stri_count("I have a dream"," ")
stri_count("I have a dream")
stri_count("I have a dream", coll)
stri_count_coll("I have a dream")
stri_count_coll("I have a dream"," ")
stri_count_fixed("I have a dream"," ")
stri_count_boundaries("I have a dream")
source('C:/GitHub/Coursera/Capstone-Project/explore_mini_v1r2.R')
tot <- colSums(samp_freq)
head(samp_freq)
tot <- Sum(samp_freq)
tot <- sum(samp_freq)
source('C:/GitHub/Coursera/Capstone-Project/explore_mini_v1r2.R')
View(samp_df)
source('C:/GitHub/Coursera/Capstone-Project/draft_backoff_v1r1.R')
stri_locate_all_charclass("the children played", )
stri_locate_all_charclass(voc_df$voc_names, "the children played")
stri_locate_all_regex(voc_df$voc_names, "the children played")
subset(voc_df, stri_locate_all_regex(voc_df$voc_names, "the children played"))
subset(voc_df, stri_detect_all_regex(voc_df$voc_names, "the children played"))
subset(voc_df, stri_detect_regex(voc_df$voc_names, "the children played"))
source('C:/GitHub/Coursera/Capstone-Project/guess_it_v1r1.R')
subset(voc_df, voc_df$voc_names =="the children played")
subset(voc_df, voc_df$voc_names =="the")
subset(voc_df, voc_df$voc_names =="the children")
subset(voc_df, voc_df$voc_names =="the children play")
grep("the children", voc_df$voc_names, ignore.case = TRUE, value=TRUE)
grep("^the children", voc_df$voc_names, ignore.case = TRUE, value=TRUE)
sort(grep("^the children", voc_df$voc_names, ignore.case = TRUE, value=TRUE))
source('C:/GitHub/Coursera/Capstone-Project/guess_it_v1r1.R')
library("stringr", lib.loc="~/R/win-library")
detach("package:stringi", unload=TRUE)
library("stringi", lib.loc="~/R/win-library")
source('C:/GitHub/Coursera/Capstone-Project/guess_it_v1r1.R')
stringi::stri_locate_all_regex(ngrams_df$voc_names, "the children")
stringi::stri_startswith(ngrams_df$voc_names, "the children")
str_detect(ngrams_df$voc_names, "the children")
str_detect(ngrams_df$voc_names, "^the children")
str_detect(ngrams_df$voc_names, "^the children", value = TRUE)
ngrams_df(str_detect(ngrams_df$voc_names, "^the children"),)
ngrams_df[str_detect(ngrams_df$voc_names, "^the children"),]
source('C:/GitHub/Coursera/Capstone-Project/draft_backoff_v1r1.R')
ngrams_df[str_detect(ngrams_df$voc_names, "^the children"),]
voc_df[str_detect(voc_df$voc_names, "^the children"),]
source('C:/GitHub/Coursera/Capstone-Project/guess_it_v1r1.R')
lapply(src_df, function(x) str_split(x$voc_term, " "))
lapply(src_df$src_file, function(x) str_split(x, "/"))
source('C:/GitHub/Coursera/Capstone-Project/guess_it_v1r1.R')
install.packages(c("caret", "fields", "gamlss", "gamlss.data", "knitr", "maps", "MuMIn", "rgdal", "rjags"), lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
View(samp2_df)
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
View(samp2_df)
View(samp1_df)
tokenize(samp_corpus, what="sentence", simplify = TRUE, removeNumbers = TRUE, removePunct = TRUE, removeTwitter = TRUE, removeHyphens = FALSE, verbose = FALSE)
ng <- tokenize(samp_corpus, what="sentence", simplify = TRUE, removeNumbers = TRUE, removePunct = TRUE, ngrams = 1:2, removeTwitter = TRUE, removeHyphens = FALSE, verbose = FALSE)
ng <- tokenize(samp_corpus, what="sentence", simplify = TRUE, removeNumbers = TRUE, removePunct = TRUE, removeTwitter = TRUE, removeHyphens = FALSE, verbose = FALSE)
head(ng)
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
View(samp1_df)
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
View(samp1_df)
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
View(samp1_df)
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
View(samp2_df)
View(samp1_df)
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
View(samp1_df)
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
View(samp1_df)
View(samp2_df)
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
View(samp2_df)
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
View(samp2_df)
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
View(samp2_df)
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
View(samp2_df)
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
View(samp2_df)
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
View(samp2_df)
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
View(samp1_df)
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
View(samp2_df)
View(samp1_df)
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
View(samp2_df)
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
View(samp2_df)
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
View(samp2_df)
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
warnings()
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
View(voc_mini_df)
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
?which
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
voc_mini_df[1,1]
voc_mini_df[1,]
voc_mini_df[1,]$voc_term
?subset
subset(voc_mini_df, voc_freq == "same", id)
subset(voc_mini_df, voc_freq == "said", id)
subset(voc_mini_df, voc_mini_df$voc_freq == "said", id)
subset(voc_mini_df, voc_mini_df$voc_freq == "said", voc_mini_df$id)
head(voc_mini_df, 40)
subset(voc_mini_df, voc_mini_df$voc_freq == "back", voc_mini_df$id)
subset(voc_mini_df, voc_freq == "back", id)
voc_mini_df %>% filter(id == 25) %>% select(voc_term)
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
debugSource('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
voc_mini_df[,vov_mini_df[,"voc_term" == "same"]]
voc_mini_df <- readRDS("Data/voc_mini_df.Rds")
voc_mini_df[,vov_mini_df[,"voc_term" == "same"]]
voc_mini_df[,voc_mini_df[,"voc_term" == "same"]]
voc_mini_df[,voc_mini_df[,voc_term == "same"]]
voc_mini_df[,voc_mini_df$voc_term == "same"]
voc_mini_df$id
?which
which(voc_mini_df$voc_term == "same")
grepl("same", voc_mini_df$voc_term)
grepl("said", voc_mini_df$voc_term)
which(apply(voc_mini_df, 2, function(x) any(grepl("said", x))))
grep("said", voc_mini_df$voc_term))))
grep("said", voc_mini_df$voc_term)
grep("children", voc_mini_df$voc_term)
grep(207, voc_mini_df$id)
voc_mini_df[id == 207]
voc_mini_df[id == 207,]
voc_mini_df[,id == 207]
voc_mini_df[, which(voc_mini_df$id == 207)]
voc_mini_df[which(voc_mini_df$id == 207),]
voc_mini_df[which(voc_mini_df$id == 207),"voc_term"]
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
ng_mini_df <- readRDS("Data/ng_mini_df.Rds")
ng_mini_df[1]
ng_mini_df[1,]
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
lapply(ng_mini_df,2, function(x) getID(ng_mini_df$ng_term))
lapply(ng_mini_df,function(x) getID(ng_mini_df$ng_term))
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
t <- ng_mini_df[1,]
class(t)
t <- as.list(ng_mini_df[1,])
class(t)
t
t$ng_term
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
rm(t)
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
debugSource('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
ng_mini_df[1:10,]
l <- list(ng_mini_df[1:10,])
l
class(l)
l
l <- as.list(ng_mini_df[1:10,])
l
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
View(ng_mini_df)
View(voc_mini_df)
getID("oil")
a <- getID("oil")
View(voc_mini_df)
?grep
debugSource('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
View(tmp_df)
warnings()
View(tmp_df)
source('~/Github/Coursera/Capstone-Project/play.R')
t_words[2]
source('~/Github/Coursera/Capstone-Project/play.R')
class(t_words)
?length
length(t_words)
t_words
str_split()
str_split(t_words)
str_split(t_words, " ")
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
View(voc_mini_df)
View(ng_mini_df)
source('~/Github/Coursera/Capstone-Project/play.R')
View(ng_mini_df)
source('~/Github/Coursera/Capstone-Project/play.R')
t
t_words
?"str_split"
source('~/Github/Coursera/Capstone-Project/play.R')
for (j in 1:z) {t_words[j]}
for (j in 1:z) {print(t_words[j])}
for (j in 1:z) {print(t_words[[j]])}
t_words[[j]]
t_words[1]
tw <- sapply(t_words,"[[")
tw <- sapply(t_words,"[[",1)
tw
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
View(ng_mini_df)
source('~/Github/Coursera/Capstone-Project/play.R')
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
nrow(ng_mini_df)
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
View(tmp_df)
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
View(t)
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
View(tmp_df)
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
View(t)
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
View(t)
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
tmp_df <- ng_mini_df[i,]
tmp_df
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
warnings()
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
ng_mini_df <- readRDS("Data/ng_mini_df.Rds")
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
debugSource('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
View(ng_mini_df)
debugSource('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
View(ng_mini_df)
debugSource('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
View(ng_mini_df)
ng_mini_df <- readRDS("Data/ng_mini_df.Rds")
View(ng_mini_df)
debugSource('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
View(ng_mini_df)
debugSource('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
View(ng_mini_df)
debugSource('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
View(ng_mini_df)
View(voc_mini_df)
source('~/Github/Coursera/Capstone-Project/explore_mini_v1r2.R')
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
View(ng_mini_df)
source('~/Github/Coursera/Capstone-Project/map_vocab_ngrams_mini.R')
install.packages("jomo")
install.packages(c("digest", "earth", "fields", "jomo", "RandomFields", "rgdal", "rjags", "Sleuth2"), lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages(c("earth", "RandomFields", "rgdal", "rjags"), lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("earth", lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("RandomFields", lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
ngram_id <- readRDS("Data/ngram_id.Rds")
tail(ngram_id)
vocab_df <- readRDS("Data/vocab_df.Rds")
vocab_df %>% group_by(vocab_freq) %>% count()
library(dplyr)
vocab_df %>% group_by(vocab_freq) %>% count()
vocab_df %>% filter(vocab_freq > 5) %>% count()
vocab_df %>% group_by(vocab_freq) %>% count()
vocab_df %>% filter(vocab_freq > 5) %>% count()
vocab_df %>% filter(vocab_freq > 1) %>% count()
vocab_df %>% filter(vocab_freq > 2) %>% count()
vocab_ovr2 <- vocab_df %>% filter(vocab_freq > 2) %>% count()
saveRDS(vocab_ovr2, "Data/vocab_ovr2.Rds")
vocab_ovr2 <- vocab_df %>% filter(vocab_freq > 2)
saveRDS(vocab_ovr2, "Data/vocab_ovr2.Rds")
vocab_over1 <- vocab_df %>% filter(vocab_freq > 1)
saveRDS(vocab_ovr1, "Data/vocab_ovr1.Rds")
saveRDS(vocab_ovr1, "Data/vocab_over1.Rds")
saveRDS(vocab_over1, "Data/vocab_ovr1.Rds")
head(ngram_id)
tail(ngram_id)
source('~/Github/Coursera/Capstone-Project/vocab_ngrams_v1r1.R')
tail(ngram_id)
head(ngram_id)
source('~/Github/Coursera/Capstone-Project/vocab_ngrams_v1r1.R')
getID("tomorrow")
vocab_df[which(vocab_df$voc_term == "tomorrow"), "id"]
View(vocab_df)
vocab_df$voc_term == "tomorrow"
vocab_df$voc_term
which(vocab_df$voc_term == "tomorrow")
